<ui:composition template="/WEB-INF/templates/template.xhtml"
                xmlns="http://www.w3.org/1999/xhtml"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                xmlns:h="http://xmlns.jcp.org/jsf/html"
                xmlns:p="http://primefaces.org/ui"
                xmlns:f="http://xmlns.jcp.org/jsf/core">

    <ui:define name="title">
        Cadastro de Pessoa
    </ui:define>

    <ui:define name="content">
        <h:form id="formCadastro">
            <!-- Inclui o modal (confirmarModel.xhtml) para reutilização -->
            <ui:include src="/model/confirmarModel.xhtml" >
                <ui:param name="modalBean" value="#{consultaPessoaBean}"/>
            </ui:include>

            <p:panel header="Formulário de alteração de cadastro" style="width:600px;">
                <!-- Mensagens gerais de erro -->
                <p:messages showDetail="true" closable="true" />

                <!-- Formulário com painel de duas colunas -->
                <p:panelGrid columns="2" columnClasses="label,value" style="width:100%; margin-bottom:1em;">
                    <p:outputLabel for="nome" value="Nome Completo:"
                                   style="text-align: left; white-space: nowrap;" />
                    <p:inputText id="nome" value="#{consultaPessoaBean.pessoaSelecionada.nome}"
                                 style="width:100%;" />

                    <p:outputLabel for="idade" value="Idade:" styleClass="label" />
                    <p:inputText id="idade" value="#{consultaPessoaBean.pessoaSelecionada.idade}"
                                 style="width:4em;" />

                    <p:outputLabel for="email" value="E-mail:" styleClass="label" />
                    <p:inputText id="email" value="#{consultaPessoaBean.pessoaSelecionada.email}"
                                 style="width:100%;" />

                    <p:outputLabel for="data" value="Data de Nascimento:" styleClass="label" />
                    <p:calendar id="data" value="#{consultaPessoaBean.pessoaSelecionada.data}"
                                pattern="dd/MM/yyyy" showIcon="true" />

                    <p:outputLabel for="dataCadastro" value="Data de Cadastro:" styleClass="label" />
                    <p:calendar id="dataCadastro" value="#{consultaPessoaBean.pessoaSelecionada.dataCadastro}"
                                pattern="dd/MM/yyyy" showIcon="true" />

                    <p:outputLabel for="interesse" value="Interesse:" styleClass="label" />
                    <p:inputText id="interesse" value="#{consultaPessoaBean.pessoaSelecionada.interesse}"
                                 style="width:100%;" />


                    <p:outputLabel for="tipo" value="Tipo de Documento:" styleClass="label" />
                    <p:selectOneMenu id="tipo" value="#{consultaPessoaBean.pessoaSelecionada.tipoDocumento}"
                                     style="width:100%;">
                        <f:selectItem itemLabel="Selecione" itemValue="" noSelectionOption="true" />
                        <f:selectItem itemLabel="CPF" itemValue="CPF" />
                        <f:selectItem itemLabel="CNPJ" itemValue="CNPJ" />
                        <p:ajax update="docPanel" process="@this" />
                    </p:selectOneMenu>

                    <!-- Bloco para CPF / CNPJ -->
                    <h:panelGroup id="docPanel" layout="block">
                        <!-- Campo CPF: exibido se o tipo for CPF -->
                        <p:outputLabel for="cpf" value="CPF:" styleClass="label"
                                       style="#{consultaPessoaBean.pessoaSelecionada.tipoDocumento eq 'CPF' ? '' : 'display:none;'}" />
                        <p:inputText id="cpf" value="#{consultaPessoaBean.pessoaSelecionada.numeroCPF}"
                                     placeholder="000.000.000-00"
                                     disabled="#{consultaPessoaBean.pessoaSelecionada.tipoDocumento ne 'CPF'}"
                                     onkeyup="formatarCPF(this)"
                                     onblur="formatarCPF(this)"
                                     onfocus="formatarCPF(this, 'CPF')"
                                     maxlength="14"
                                     style="width:100%; #{consultaPessoaBean.pessoaSelecionada.tipoDocumento eq 'CPF' ? '' : 'display:none;'}" />

                        <!-- Campo CNPJ: exibido se o tipo for CNPJ -->
                        <p:outputLabel for="cnpj" value="CNPJ:" styleClass="label"
                                       style="#{consultaPessoaBean.pessoaSelecionada.tipoDocumento eq 'CNPJ' ? '' : 'display:none;'}" />
                        <p:inputText id="cnpj" value="#{consultaPessoaBean.pessoaSelecionada.numeroCNPJ}"
                                     placeholder="99.999.999/9999-99"
                                     onkeyup="formatarCNPJ(this)"
                                     onblur="formatarCNPJ(this)"
                                     onfocus="formatarCNPJ(this, 'CNPJ')"
                                     maxlength="14"
                                     disabled="#{consultaPessoaBean.pessoaSelecionada.tipoDocumento ne 'CNPJ'}"
                                     style="width:100%; #{consultaPessoaBean.pessoaSelecionada.tipoDocumento eq 'CNPJ' ? '' : 'display:none;'}" />
                    </h:panelGroup>
                </p:panelGrid>

                <p:separator/>

                <p:commandButton value="Limpar"
                                 action="#{consultaPessoaBean.limpar}"
                                 update="@form"
                                 icon="pi pi-refresh"
                                 styleClass="ui-button-secondary" />

                <!-- Botão Salvar chama o método de validação na bean.
                     Se a validação for bem-sucedida, o método validarCampos() invoca o modal de confirmação. -->
                <p:commandButton value="Salvar"
                                 action="#{consultaPessoaBean.validarCampos}"
                                 update="@form"
                                 icon="pi pi-save"
                                 ajax="true" />

            </p:panel>

            <!-- Diálogo para exibir a lista de campos não preenchidos -->
            <p:dialog widgetVar="errorDialog" header="Campos não preenchidos"
                      modal="true" closable="false" resizable="false">
                <h:outputText value="#{consultaPessoaBean.errorMessage}" escape="false" />
                <f:facet name="footer">
                    <p:commandButton value="Fechar"
                                     onclick="PF('errorDialog').hide();"
                                     type="button" />
                </f:facet>
            </p:dialog>
            <!-- Diaglogo de sucesso-->
            <p:dialog widgetVar="successDialog" header="Sucesso"
                      modal="true" closable="false" resizable="false">
                <h:outputText value="Cadastro alterado com sucesso!" />
                <f:facet name="footer">
                    <p:commandButton value="Ok"
                                     type="button"
                                     onclick="PF('successDialog').hide(); window.location='#{request.contextPath}/cadastro/consultaPessoas.xhtml';"
                                     icon="pi pi-check" />
                </f:facet>
            </p:dialog>
        </h:form>
        <script type="text/javascript">
            //<![CDATA[
            // Variáveis para controlar o estado dos campos
            let cpfDigitado = '';
            let cnpjDigitado = '';
            let isInitialized = false;

            function inicializarCampo(campo, tipo) {
                if (campo.value === '' || campo.value === campo.placeholder) {
                    if (tipo === 'CPF') {
                        campo.value = '000.000.000-00';
                        cpfDigitado = '';
                    } else {
                        campo.value = '00.000.000/0000-00';
                        cnpjDigitado = '';
                    }
                }
                isInitialized = true;
            }

            function formatarCPF(campo) {
                // Se não foi inicializado pelo evento keydown, processa normalmente
                if (!isInitialized) {
                    let valor = campo.value.replace(/\D/g, '');

                    if (valor === '') {
                        campo.value = '000.000.000-00';
                        cpfDigitado = '';
                        return;
                    }

                    // Remove zeros à esquerda para obter apenas os dígitos significativos
                    cpfDigitado = valor.replace(/^0+/, '') || '';

                    // Aplica formatação
                    valor = valor.padStart(11, '0');
                    valor = valor.substring(0, 11);
                    valor = valor.replace(/(\d{3})(\d{3})(\d{3})(\d{2})/, '$1.$2.$3-$4');
                    campo.value = valor;
                }
                isInitialized = false;
            }

            function formatarCNPJ(campo) {
                // Se não foi inicializado pelo evento keydown, processa normalmente
                if (!isInitialized) {
                    let valor = campo.value.replace(/\D/g, '');

                    if (valor === '') {
                        campo.value = '00.000.000/0000-00';
                        cnpjDigitado = '';
                        return;
                    }

                    // Remove zeros à esquerda para obter apenas os dígitos significativos
                    cnpjDigitado = valor.replace(/^0+/, '') || '';

                    // Aplica formatação
                    valor = valor.padStart(14, '0');
                    valor = valor.substring(0, 14);
                    valor = valor.replace(/(\d{2})(\d{3})(\d{3})(\d{4})(\d{2})/, '$1.$2.$3/$4-$5');
                    campo.value = valor;
                }
                isInitialized = false;
            }

            // Função para aplicar formatação mantendo a sequência
            function aplicarFormatacao(campo, digitosDigitados, isCPF) {
                let valor;
                if (isCPF) {
                    valor = digitosDigitados.padStart(11, '0');
                    valor = valor.substring(0, 11);
                    valor = valor.replace(/(\d{3})(\d{3})(\d{3})(\d{2})/, '$1.$2.$3-$4');
                } else {
                    valor = digitosDigitados.padStart(14, '0');
                    valor = valor.substring(0, 14);
                    valor = valor.replace(/(\d{2})(\d{3})(\d{3})(\d{4})(\d{2})/, '$1.$2.$3/$4-$5');
                }
                campo.value = valor;
                isInitialized = true;
            }

            // Função para permitir digitação mantendo a sequência
            function adicionarEventosDigitacao() {
                document.addEventListener('keydown', function(e) {
                    const campo = e.target;

                    // Verifica se é um campo CPF ou CNPJ
                    if (campo.id && (campo.id.includes('cpf') || campo.id.includes('cnpj'))) {
                        const isCPF = campo.id.includes('cpf');
                        const maxLength = isCPF ? 11 : 14;

                        // Se pressionar backspace ou delete
                        if (e.key === 'Backspace' || e.key === 'Delete') {
                            e.preventDefault();

                            if (isCPF) {
                                if (cpfDigitado.length > 0) {
                                    cpfDigitado = cpfDigitado.substring(0, cpfDigitado.length - 1);
                                }
                                aplicarFormatacao(campo, cpfDigitado, true);
                            } else {
                                if (cnpjDigitado.length > 0) {
                                    cnpjDigitado = cnpjDigitado.substring(0, cnpjDigitado.length - 1);
                                }
                                aplicarFormatacao(campo, cnpjDigitado, false);
                            }
                        }
                        // Se pressionar um número
                        else if (/\d/.test(e.key)) {
                            e.preventDefault();

                            if (isCPF) {
                                if (cpfDigitado.length < maxLength) {
                                    cpfDigitado += e.key;
                                }
                                aplicarFormatacao(campo, cpfDigitado, true);
                            } else {
                                if (cnpjDigitado.length < maxLength) {
                                    cnpjDigitado += e.key;
                                }
                                aplicarFormatacao(campo, cnpjDigitado, false);
                            }
                        }
                    }
                });

                // Sincroniza quando o campo recebe foco
                document.addEventListener('focus', function(e) {
                    const campo = e.target;
                    if (campo.id && campo.id.includes('cpf')) {
                        let valor = campo.value.replace(/\D/g, '');
                        cpfDigitado = valor.replace(/^0+/, '') || '';
                    } else if (campo.id && campo.id.includes('cnpj')) {
                        let valor = campo.value.replace(/\D/g, '');
                        cnpjDigitado = valor.replace(/^0+/, '') || '';
                    }
                }, true);

                // Limpa as variáveis quando o campo perde o foco
                document.addEventListener('blur', function(e) {
                    const campo = e.target;
                    if (campo.id && (campo.id.includes('cpf') || campo.id.includes('cnpj'))) {
                        // Sincroniza novamente para garantir consistência
                        if (campo.id.includes('cpf')) {
                            let valor = campo.value.replace(/\D/g, '');
                            cpfDigitado = valor.replace(/^0+/, '') || '';
                        } else {
                            let valor = campo.value.replace(/\D/g, '');
                            cnpjDigitado = valor.replace(/^0+/, '') || '';
                        }
                    }
                }, true);
            }

            // Inicializa os eventos quando a página carrega
            document.addEventListener('DOMContentLoaded', function() {
                adicionarEventosDigitacao();
            });
            //]]>
 </script>
    </ui:define>

    <ui:define name="footer">
        Rodapé – Página de Cadastro
    </ui:define>
</ui:composition>